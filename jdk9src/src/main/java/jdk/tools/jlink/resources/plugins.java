package jdk.tools.jlink.resources;

import java.util.ListResourceBundle;

public final class plugins extends ListResourceBundle {
    protected final Object[][] getContents() {
        return new Object[][] {
            { "class-optim.argument", "<all|forName-folding>[:log=<log file>]" },
            { "class-optim.description", "Class optimization. Warning: This plugin is experimental.\nAn optional <log file> can be specified to log applied optimizations." },
            { "compact-cp.argument", "<resource paths>" },
            { "compact-cp.description", "Constant Pool strings sharing.\nBy default, all resources are compressed. You can express the set \nof resources to compress or not compress (use ^ for negation)." },
            { "compress.argument", "<0|1|2>[:filter=<pattern>]" },
            { "compress.description", "Compress all resources in the output image.\nLevel 0: constant string sharing\nLevel 1: ZIP\nLevel 2: both.\nAn optional filter can be specified to list the pattern of files to be filtered.\nUse ^ for negation. e.g.: *Exception.class,*Error.class,^/java.base/java/lang/*" },
            { "copy-files.argument", "<List of <file path>=<image target> to copy to the image>." },
            { "copy-files.description", "If files to copy are not absolute path, JDK home dir is used.\ne.g.: jrt-fs.jar,LICENSE,/home/me/myfile.txt=somewehere/conf.txt" },
            { "err.dir.already.exits", "directory already exists: {0} " },
            { "err.invalid.index", "invalid index for option {0}" },
            { "err.no.plugins.path", "No plugins path argument." },
            { "err.plugin.mutiple.options", "More than one plugin enabled by {0} option" },
            { "err.plugin.option.not.set", "Option {0} must be set." },
            { "err.provider.additional.arg.error", "Error in additional argument specification in {0} option: {1}" },
            { "err.provider.not.functional", "The provider {0} is not functional." },
            { "exclude-files.argument", "<files to exclude | files of excluded files>" },
            { "exclude-files.description", "Specify files to exclude. e.g.: *.diz, /java.base/native/client/*" },
            { "exclude-resources.argument", "<resources to exclude | file of excluded resources>" },
            { "exclude-resources.description", "Specify resources to exclude. e.g.: *.jcov, */META-INF/*" },
            { "generate-jli-classes.argument", "<bmh[:bmh-species=LL,L3,...]>" },
            { "generate-jli-classes.description", "Concrete java.lang.invoke classes to generate" },
            { "include-locales.argument", "<langtag>[,<langtag>]*" },
            { "include-locales.description", "BCP 47 language tags separated by a comma, allowing locale matching\ndefined in RFC 4647. e.g.: en,ja,*-IN" },
            { "include-locales.invalidtag", "Invalid language tag: %s" },
            { "include-locales.missingpackages", "Missing locale data packages in jdk.localedata:\n\t" },
            { "include-locales.nomatchinglocales", "No matching locales found for \"%s\". Check the specified pattern." },
            { "installed-modules.description", "Fast loading of module descriptors (always enabled)" },
            { "main.plugin.argument", "Argument" },
            { "main.plugin.category", "Category" },
            { "main.plugin.class", "Plugin Class" },
            { "main.plugin.description", "Description" },
            { "main.plugin.module", "Plugin Module" },
            { "main.plugin.name", "Plugin Name" },
            { "main.plugin.no.value", "<empty>" },
            { "main.plugin.option", "Option" },
            { "main.plugin.post.processors", "Image Post Processors:" },
            { "main.plugin.range.from", "Range from" },
            { "main.plugin.range.to", "to" },
            { "main.plugin.state", "Functional state" },
            { "main.status.not.ok", "Not functional." },
            { "main.status.ok", "Functional." },
            { "onoff.argument", "<on|off>" },
            { "plugin.opt.G", "  -G, --strip-debug                 Strip debug information" },
            { "plugin.opt.c", "  -c, --compress=2                  Enable compression of resources (level 2)" },
            { "plugin.opt.list-plugins", "  --list-plugins                    List available plugins" },
            { "plugin.opt.plugins-modulepath", "  --plugin-module-path <modulepath> Custom plugins module path" },
            { "plugin.opt.post-process-path", "  --post-process-path <imagefile>   Post process an existing image" },
            { "plugin.opt.resources-last-sorter", "  --resources-last-sorter <name>    The last plugin allowed to sort resources" },
            { "plugin.plugins.header", "List of available plugin options:" },
            { "release-info.argument", "<file>|add:<key1>=<value1>:<key2>=<value2>:...|del:<key list>" },
            { "release-info.description", "<file> option is to load release properties from the supplied file.\nadd: is to add properties to the 'release' file.\nAny number of <key>=<value> pairs can be passed.\ndel: is to delete the list of keys in release file." },
            { "sort-resources.argument", "<paths in priority order | file with resource paths>" },
            { "sort-resources.description", "Sort resources. e.g.: */modules-info.class,/java-base/java/lang/*" },
            { "strip-debug.description", "Strip debug information from the output image" },
            { "strip-native-commands.description", "Exclude native commands (such as java/java.exe) from the image" },
            { "vm.argument", "<client|server|minimal|all>" },
            { "vm.description", "Select the HotSpot VM in the output image.  Default is all" },
            { "warn.thirdparty.plugins", "Enabling third party plugins can lead to unusable generated image." },
            { "warn.thirdparty.plugins.enabled", "You have enabled third party plugins." },
            { "zip.argument", "[comma separated list of resource paths]" },
            { "zip.description", "ZIP Compression" },
        };
    }
}
